// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//
// ENUMS
//
enum UserStatus {
  ARCHIVED
  CURRENT
}

enum ServiceSeekerStatus {
  LIVE
  PRE_ADMISSION
  ARCHIVED
  ARCHIVED_PRE_ADMISSION
  ON_HOLD_HOSPITAL
}

enum ChargeType {
  PER_HOUR
  PER_SHIFT
}

enum FunderPaymentType {
  PER_SHIFT
  BY_PERCENTAGE_SPENT
}

//
// MODELS
//

model RoleDefinition {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "ADMIN", "CAREWORKER"
  displayName String   // e.g., "Administrator", "Care Worker"
  description String?
  permissions Json     // Array of permission strings
  isSystem    Boolean  @default(false) // System roles cannot be deleted
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
}

model User {
  id               String       @id @default(cuid())
  firstName        String
  lastName         String
  username         String       @unique
  phoneNo          String
  email            String       @unique
  roleId           String
  password         String
  isEmailVerified  Boolean      @default(false)
  lastLoggedIn     DateTime?
  profilePic       String?
  employeeNumber   String?      @unique
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  startDate        DateTime?
  leaveDate        DateTime?
  regionId         String?
  emergencyName    String?
  emergencyContact String?
  postalCode       String?
  contractedHours  Int?
  status           UserStatus
  niNumber         String?

  // Relations
  role             RoleDefinition @relation(fields: [roleId], references: [id])
  region           Region?      @relation(fields: [regionId], references: [id])
  documents        Document[]   @relation("UserDocuments")
  uploadedDocs     Document[]   @relation("UploadedByUser")
  standByShifts    StandByShift[]

  permissions      UserPermission[]

  // Audit relations
  createdServiceSeekers     ServiceSeeker[]       @relation("ServiceSeekerCreatedBy")
  updatedServiceSeekers     ServiceSeeker[]       @relation("ServiceSeekerUpdatedBy")
  createdBathingTasks       BathingTask[]         @relation("BathingTaskCreatedBy")
  updatedBathingTasks       BathingTask[]         @relation("BathingTaskUpdatedBy")
  createdBehaviourTasks     BehaviourTask[]       @relation("BehaviourTaskCreatedBy")
  updatedBehaviourTasks     BehaviourTask[]       @relation("BehaviourTaskUpdatedBy")
  createdBloodTestTasks     BloodTestTask[]       @relation("BloodTestTaskCreatedBy")
  updatedBloodTestTasks     BloodTestTask[]       @relation("BloodTestTaskUpdatedBy")
  createdBloodPressureTasks     BloodPressureTask[]       @relation("BloodPressureTaskCreatedBy")
  updatedBloodPressureTasks     BloodPressureTask[]       @relation("BloodPressureTaskUpdatedBy")
  createdComfortCheckTasks      ComfortCheckTask[]        @relation("ComfortCheckTaskCreatedBy")
  updatedComfortCheckTasks      ComfortCheckTask[]        @relation("ComfortCheckTaskUpdatedBy")
  createdCommunicationNotesTasks CommunicationNotesTask[] @relation("CommunicationNotesTaskCreatedBy")
  updatedCommunicationNotesTasks CommunicationNotesTask[] @relation("CommunicationNotesTaskUpdatedBy")
  createdFamilyPhotoMessageTasks FamilyPhotoMessageTask[] @relation("FamilyPhotoMessageTaskCreatedBy")
  updatedFamilyPhotoMessageTasks FamilyPhotoMessageTask[] @relation("FamilyPhotoMessageTaskUpdatedBy")
  createdFoodDrinkTasks          FoodDrinkTask[]          @relation("FoodDrinkTaskCreatedBy")
  updatedFoodDrinkTasks          FoodDrinkTask[]          @relation("FoodDrinkTaskUpdatedBy")
  createdGeneralSupportTasks     GeneralSupportTask[]     @relation("GeneralSupportTaskCreatedBy")
  updatedGeneralSupportTasks     GeneralSupportTask[]     @relation("GeneralSupportTaskUpdatedBy")
  createdHouseKeepingTasks       HouseKeepingTask[]       @relation("HouseKeepingTaskCreatedBy")
  updatedHouseKeepingTasks       HouseKeepingTask[]       @relation("HouseKeepingTaskUpdatedBy")
  witnessedIncidentFallTasks     IncidentFallTask[]       @relation("IncidentFallTaskWitnessedBy")
  createdIncidentFallTasks       IncidentFallTask[]       @relation("IncidentFallTaskCreatedBy")
  updatedIncidentFallTasks       IncidentFallTask[]       @relation("IncidentFallTaskUpdatedBy")
  signoffMedicinePrnTasks        MedicinePrnTask[]        @relation("MedicinePrnTaskSignoffBy")
  createdMedicinePrnTasks        MedicinePrnTask[]        @relation("MedicinePrnTaskCreatedBy")
  updatedMedicinePrnTasks        MedicinePrnTask[]        @relation("MedicinePrnTaskUpdatedBy")
  createdMuacTasks               MuacTask[]               @relation("MuacTaskCreatedBy")
  updatedMuacTasks               MuacTask[]               @relation("MuacTaskUpdatedBy")
  createdObservationTasks        ObservationTask[]        @relation("ObservationTaskCreatedBy")
  updatedObservationTasks        ObservationTask[]        @relation("ObservationTaskUpdatedBy")
  createdOneToOneTasks           OneToOneTask[]           @relation("OneToOneTaskCreatedBy")
  updatedOneToOneTasks           OneToOneTask[]           @relation("OneToOneTaskUpdatedBy")
  createdOralCareTasks           OralCareTask[]           @relation("OralCareTaskCreatedBy")
  updatedOralCareTasks           OralCareTask[]           @relation("OralCareTaskUpdatedBy")
  createdOxygenTasks             OxygenTask[]             @relation("OxygenTaskCreatedBy")
  updatedOxygenTasks             OxygenTask[]             @relation("OxygenTaskUpdatedBy")
  createdPersonCentredTasks      PersonCentredTask[]      @relation("PersonCentredTaskCreatedBy")
  updatedPersonCentredTasks      PersonCentredTask[]      @relation("PersonCentredTaskUpdatedBy")
  createdFollowUpTasks           FollowUpTask[]           @relation("FollowUpTaskCreatedBy")
  updatedFollowUpTasks           FollowUpTask[]           @relation("FollowUpTaskUpdatedBy")
}

model UserPermission {
  id        String   @id @default(cuid())
  userId    String
  key       String   // flexible permission key (admin defines)

  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, key]) // prevent duplicate permissions for same user
}

model Document {
  id         String   @id @default(cuid())
  userId     String   // document belongs to this user
  uploadedBy String   // uploaded by which user

  fileUrl    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user       User     @relation("UserDocuments", fields: [userId], references: [id])
  uploader   User     @relation("UploadedByUser", fields: [uploadedBy], references: [id])
}

model Region {
  id        String   @id @default(cuid())
  title     String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]
}

model DailyTask {
  id        String   @id @default(cuid())
  taskTitle String
  logoUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceSeeker {
  id             String              @id @default(cuid())
  firstName      String
  lastName       String
  postalCode     String?
  address        String?
  latitude       Float?
  longitude      Float?
  photoUrl       String?
  title          String?
  preferredName  String?
  dateOfBirth    DateTime?
  gender         String?
  genderAtBirth  String?
  pronouns       String?
  dnar           Boolean?
  sexuality      String?
  status         ServiceSeekerStatus
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdById    String?
  updatedById    String?

  shifts                  Shift[]
  bathingTasks            BathingTask[]
  behaviourTasks          BehaviourTask[]
  bloodTestTasks          BloodTestTask[]
  bloodPressureTasks      BloodPressureTask[]
  comfortCheckTasks       ComfortCheckTask[]
  communicationNotesTasks CommunicationNotesTask[]
  familyPhotoMessageTasks FamilyPhotoMessageTask[]
  foodDrinkTasks          FoodDrinkTask[]
  generalSupportTasks     GeneralSupportTask[]
  houseKeepingTasks       HouseKeepingTask[]
  incidentFallTasks       IncidentFallTask[]
  medicinePrnTasks        MedicinePrnTask[]
  muacTasks               MuacTask[]
  observationTasks        ObservationTask[]
  oneToOneTasks           OneToOneTask[]
  oralCareTasks           OralCareTask[]
  oxygenTasks             OxygenTask[]
  personCentredTasks      PersonCentredTask[]
  followUpTasks           FollowUpTask[]

  // Relations
  createdBy               User?    @relation("ServiceSeekerCreatedBy", fields: [createdById], references: [id])
  updatedBy               User?    @relation("ServiceSeekerUpdatedBy", fields: [updatedById], references: [id])
}

model Shift {
  id                 String    @id @default(cuid())
  serviceSeekerId    String
  fromDate           DateTime
  untilDate          DateTime?
  every              String?   // "day" | "week"
  startTime          DateTime
  endTime            DateTime
  shiftType          String
  totalStaffReq      Int
  funderId           String?
  chargesPer         ChargeType
  charges            Float
  chargesBankHoliday Float?
  timeCritical       Boolean   @default(false)
  shiftRunId         String?
  noteCaretaker      String?
  noteManager        String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  serviceSeeker      ServiceSeeker @relation(fields: [serviceSeekerId], references: [id])
  funder             Funder?       @relation(fields: [funderId], references: [id])
  shiftRun           ShiftRun?     @relation(fields: [shiftRunId], references: [id])
}

model Funder {
  id              String   @id @default(cuid())
  fundingSource   String
  contractNumber  String
  serviceType     String
  costNotes       String?
  paymentType     FunderPaymentType
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  shifts          Shift[]
}

model ShiftRun {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shifts    Shift[]
}

model StandByShift {
  id                   String   @id @default(cuid())
  caretakerId          String
  date                 DateTime
  startTime            DateTime
  endTime              DateTime
  workDetail           String
  stay                 Boolean
  caretakerPayRegular  Float
  caretakerPayBankHoliday Float
  carerPayBy           ChargeType

  // Relations
  caretaker            User     @relation(fields: [caretakerId], references: [id])
}

enum BathingType {
  BATH
  BEDWASH
  FULL_BODY_WASH
  LOWER_BODY_WASH
  SHOWER
  STRIP_WASH
}

enum ComplianceStatus {
  COMPLETED
  DECLINED
}

enum TaskCompletion {
  YES
  NO
  ATTEMPTED
  NOT_REQUIRED
}

enum EmotionType {
  SAD
  NEUTRAL
  HAPPY
}

model BathingTask {
  id                String           @id @default(cuid())
  serviceSeekerId   String
  date              DateTime
  time              String
  bathingType       BathingType
  compliance        ComplianceStatus
  stoolPassed       Boolean
  urinePassed       Boolean
  bathNotes         String?
  catheterChecked   Boolean
  completed         TaskCompletion
  emotion           EmotionType
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  createdById       String
  updatedById       String

  // Relations
  serviceSeeker     ServiceSeeker    @relation(fields: [serviceSeekerId], references: [id])
  createdBy         User             @relation("BathingTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy         User             @relation("BathingTaskUpdatedBy", fields: [updatedById], references: [id])
}

enum BehaviourType {
  AGGRESSION_HITTING_BITING
  CRYING
  HAPPY_APPRECIATING
  ISOLATION
  SELF_INJURIOUS_BEHAVIOUR
  SEXUALIZED_BEHAVIOUR_IN_PUBLIC
  SHOUTING_SWEARING
  SOILING_SMEARING
  STARVATION
  THROWING_BREAKING_ITEMS
}

model BehaviourTrigger {
  id          String   @id @default(cuid())
  name        String   @unique
  define      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  behaviourTasks BehaviourTask[]
}

model BehaviourTask {
  id                    String           @id @default(cuid())
  serviceSeekerId       String
  date                  DateTime
  time                  String
  type                  BehaviourType
  triggerId             String
  othersInvolved        Boolean
  othersInvolvedDetails String?
  antecedents           String?
  behaviour             String?
  consequences          String?
  careIntervention      String?
  emotion               EmotionType
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  createdById           String
  updatedById           String

  // Relations
  serviceSeeker         ServiceSeeker    @relation(fields: [serviceSeekerId], references: [id])
  trigger               BehaviourTrigger @relation(fields: [triggerId], references: [id])
  createdBy             User             @relation("BehaviourTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy             User             @relation("BehaviourTaskUpdatedBy", fields: [updatedById], references: [id])
}

enum BloodTestWhen {
  BEFORE_BREAKFAST
  AFTER_BREAKFAST
  BEFORE_LUNCH
  AFTER_LUNCH
  BEFORE_TEA
  AFTER_TEA
  BEFORE_DINNER
  AFTER_DINNER
}

enum SideAdministered {
  LEFT
  LEFT_UPPER
  LEFT_LOWER
  RIGHT
  RIGHT_UPPER
  RIGHT_LOWER
}

model BloodTestTask {
  id                  String           @id @default(cuid())
  serviceSeekerId     String
  date                DateTime
  time                String
  when                BloodTestWhen
  bloodGlucose        Float?
  insulinGiven        String?
  sideAdministered    SideAdministered?
  note                String?
  completed           TaskCompletion
  emotion             EmotionType
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  createdById         String
  updatedById         String

  // Relations
  serviceSeeker       ServiceSeeker    @relation(fields: [serviceSeekerId], references: [id])
  createdBy           User             @relation("BloodTestTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy           User             @relation("BloodTestTaskUpdatedBy", fields: [updatedById], references: [id])
}

model BloodPressureTask {
  id                  String           @id @default(cuid())
  serviceSeekerId     String
  date                DateTime
  time                String
  systolicPressure    Int
  diastolicPressure   Int
  notes               String?
  completed           TaskCompletion
  emotion             EmotionType
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  createdById         String
  updatedById         String

  // Relations
  serviceSeeker       ServiceSeeker    @relation(fields: [serviceSeekerId], references: [id])
  createdBy           User             @relation("BloodPressureTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy           User             @relation("BloodPressureTaskUpdatedBy", fields: [updatedById], references: [id])
}

model ComfortCheckTask {
  id                      String           @id @default(cuid())
  serviceSeekerId         String
  date                    DateTime
  time                    String
  allNeedsMet             Boolean
  catheterCheck           Boolean
  incontinencePadCheck    Boolean
  personalHygiene         Boolean
  repositioned            Boolean
  sleep                   Boolean
  stomaCheck              Boolean
  toileted                Boolean
  stoolPassed             Boolean
  urinePassed             Boolean
  notes                   String?
  completed               TaskCompletion
  emotion                 EmotionType
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  createdById             String
  updatedById             String

  // Relations
  serviceSeeker           ServiceSeeker    @relation(fields: [serviceSeekerId], references: [id])
  createdBy               User             @relation("ComfortCheckTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy               User             @relation("ComfortCheckTaskUpdatedBy", fields: [updatedById], references: [id])
}

model CommunicationNotesTask {
  id                String           @id @default(cuid())
  serviceSeekerId   String
  date              DateTime
  notes             String
  emotion           EmotionType
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  createdById       String
  updatedById       String

  // Relations
  serviceSeeker     ServiceSeeker    @relation(fields: [serviceSeekerId], references: [id])
  createdBy         User             @relation("CommunicationNotesTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy         User             @relation("CommunicationNotesTaskUpdatedBy", fields: [updatedById], references: [id])
}

model FamilyPhotoMessageTask {
  id                  String           @id @default(cuid())
  serviceSeekerId     String
  date                DateTime
  time                String
  description         String?
  messageFromResidence String?
  photoUrl            String?
  emotion             EmotionType
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  createdById         String
  updatedById         String

  // Relations
  serviceSeeker       ServiceSeeker    @relation(fields: [serviceSeekerId], references: [id])
  createdBy           User             @relation("FamilyPhotoMessageTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy           User             @relation("FamilyPhotoMessageTaskUpdatedBy", fields: [updatedById], references: [id])
}

enum FollowUpStatus {
  ONGOING
  COMPLETED
}

enum MealTime {
  BREAKFAST
  TEA
  MORNING_SNACK
  LUNCH
  DINNER
  EVENING_SNACK
  AFTERNOON_SNACK
  OTHER
}

enum MealPortion {
  LEFT_EATING_MEAL
  NONE
  QUARTER_EATEN
  HALF_EATEN
  THREE_QUARTER_EATEN
  ALL
}

enum AssistanceType {
  REQUIRED
  SELF_REQUIRED
}

enum FoodDrinkOffered {
  YES
  NO_ASLEEP
  NO_GONE_OUT
  NO_NOT_WANTED
}

model FoodDrinkTask {
  id                  String            @id @default(cuid())
  serviceSeekerId     String
  date                DateTime
  time                MealTime
  foodDrinkOffer      String?
  main                MealPortion
  fluidIntake         Int               // in ml
  comments            String?
  assistance          AssistanceType
  foodDrinkOffered    FoodDrinkOffered
  pictureUrl          String?
  completed           TaskCompletion
  emotion             EmotionType
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  createdById         String
  updatedById         String

  // Relations
  serviceSeeker       ServiceSeeker     @relation(fields: [serviceSeekerId], references: [id])
  createdBy           User              @relation("FoodDrinkTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy           User              @relation("FoodDrinkTaskUpdatedBy", fields: [updatedById], references: [id])
}

model SupportList {
  id                String              @id @default(cuid())
  name              String              @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  generalSupportTasks GeneralSupportTask[]
}

model GeneralSupportTask {
  id                String           @id @default(cuid())
  serviceSeekerId   String
  date              DateTime
  time              String
  notes             String?
  supportListId     String
  emotion           EmotionType
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  createdById       String
  updatedById       String

  // Relations
  serviceSeeker     ServiceSeeker    @relation(fields: [serviceSeekerId], references: [id])
  supportList       SupportList      @relation(fields: [supportListId], references: [id])
  createdBy         User             @relation("GeneralSupportTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy         User             @relation("GeneralSupportTaskUpdatedBy", fields: [updatedById], references: [id])
}

model HouseKeepingTask {
  id                String           @id @default(cuid())
  serviceSeekerId   String
  date              DateTime
  time              String
  task              String
  notes             String?
  photoUrl          String?
  completed         TaskCompletion
  emotion           EmotionType
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  createdById       String
  updatedById       String

  // Relations
  serviceSeeker     ServiceSeeker    @relation(fields: [serviceSeekerId], references: [id])
  createdBy         User             @relation("HouseKeepingTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy         User             @relation("HouseKeepingTaskUpdatedBy", fields: [updatedById], references: [id])
}

model IncidentType {
  id                String              @id @default(cuid())
  type              String              @unique
  canEdit           Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  incidentFallTasks IncidentFallTask[]
}

model IncidentLocation {
  id                String              @id @default(cuid())
  name              String              @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  incidentFallTasks IncidentFallTask[]
}

enum ServiceUserInjured {
  YES
  NO
  UNSURE
}

enum WitnessedBy {
  NOBODY
  STAFF
}

enum PhotoConsent {
  YES
  NO
  SPECIFIED
}

enum ResidentInfoProvided {
  YES
  NO
  NOT_RELIABLY
}

enum YesNoOption {
  YES
  NO
}

enum YesNoNotYetOption {
  YES
  NO
  NOT_YET
}

enum ContactsCalled {
  NO_ONE
  AMBULANCE
  ONE_ONE_ONE_CALLED
  ADULT_TRANSITION_TEAM
  CHIROPODIST
  CLINICAL_NAVIGATION
  CLINICAL_PSYCHOLOGIST
  DISTRICT_NURSE
  DOLS
  ENRICH_TEAM
  FCPA
  GP
  MANAGER
  PARAMEDIC
  PHARMACIST
  SALT
  SOCIAL_WORKER
  SPA
  TEAM_MANAGER
}

model IncidentFallTask {
  id                          String                  @id @default(cuid())
  serviceSeekerId             String
  date                        DateTime
  time                        String
  incidentTypeId              String
  incidentLasted              String                  // time duration
  locationId                  String
  othersInvolved              Boolean
  othersInvolvedDetails       String?
  injuryDetail                String?
  serviceUserInjured          ServiceUserInjured
  witnessedBy                 WitnessedBy
  witnessedByStaffId          String?
  witnessDetail               String?
  photoConsent                PhotoConsent
  photoUrl                    String?
  residentInfoProvided        ResidentInfoProvided
  whatResidentDoing           String?
  howIncidentHappened         String?
  dateReportedToSeniorStaff   DateTime?
  equipmentInvolved           YesNoOption
  relativesInformed           YesNoNotYetOption
  contactsCalled              ContactsCalled
  notes                       String?
  emotion                     EmotionType
  signatureUrl                String?
  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @updatedAt
  createdById                 String
  updatedById                 String

  // Relations
  serviceSeeker               ServiceSeeker           @relation(fields: [serviceSeekerId], references: [id])
  incidentType                IncidentType            @relation(fields: [incidentTypeId], references: [id])
  location                    IncidentLocation        @relation(fields: [locationId], references: [id])
  witnessedByStaff            User?                   @relation("IncidentFallTaskWitnessedBy", fields: [witnessedByStaffId], references: [id])
  createdBy                   User                    @relation("IncidentFallTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy                   User                    @relation("IncidentFallTaskUpdatedBy", fields: [updatedById], references: [id])
}

enum MedicineType {
  CREAM
  FLUID
  INJECTION
  PATCH
  PEG
  INHALER
  LIQUID
  SYRUP
  CAPSULE
  NEBULIZER
  OTHER
}

enum SignoffRequired {
  NOT_NEEDED
  REQUIRED
}

enum MedicineCompleted {
  YES
  NO
  ATTEMPTED
}

enum OralCareType {
  BRUSHED_TEETH
  DENTURE_SOAK
  DENTURE_FILLED
  MOUTH_WASH
}

enum AssistedType {
  SELF_ASSISTED
  ASSISTED
}

model MedicinePrnTask {
  id                  String              @id @default(cuid())
  serviceSeekerId     String
  applyDate           DateTime
  applyTime           String
  prn                 String
  medicineName        String
  medicineType        MedicineType
  administrated       Boolean
  notes               String?
  requestSignoffBy    SignoffRequired
  signoffByStaffId    String?
  completed           MedicineCompleted
  emotion             EmotionType
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  createdById         String
  updatedById         String

  // Relations
  serviceSeeker       ServiceSeeker       @relation(fields: [serviceSeekerId], references: [id])
  signoffByStaff      User?               @relation("MedicinePrnTaskSignoffBy", fields: [signoffByStaffId], references: [id])
  createdBy           User                @relation("MedicinePrnTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy           User                @relation("MedicinePrnTaskUpdatedBy", fields: [updatedById], references: [id])
}

model MuacTask {
  id                  String              @id @default(cuid())
  serviceSeekerId     String
  date                DateTime
  time                String
  muacInCm            Float
  notes               String?
  completed           TaskCompletion
  emotion             EmotionType
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  createdById         String
  updatedById         String

  // Relations
  serviceSeeker       ServiceSeeker       @relation(fields: [serviceSeekerId], references: [id])
  createdBy           User                @relation("MuacTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy           User                @relation("MuacTaskUpdatedBy", fields: [updatedById], references: [id])
}

model ObservationTask {
  id                  String              @id @default(cuid())
  serviceSeekerId     String
  date                DateTime
  time                String
  notes               String
  emotion             EmotionType
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  createdById         String
  updatedById         String

  // Relations
  serviceSeeker       ServiceSeeker       @relation(fields: [serviceSeekerId], references: [id])
  createdBy           User                @relation("ObservationTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy           User                @relation("ObservationTaskUpdatedBy", fields: [updatedById], references: [id])
}

model OneToOneTask {
  id                  String              @id @default(cuid())
  serviceSeekerId     String
  date                DateTime
  time                String
  duration            String
  notes               String
  emotion             EmotionType
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  createdById         String
  updatedById         String

  // Relations
  serviceSeeker       ServiceSeeker       @relation(fields: [serviceSeekerId], references: [id])
  createdBy           User                @relation("OneToOneTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy           User                @relation("OneToOneTaskUpdatedBy", fields: [updatedById], references: [id])
}

model OralCareTask {
  id                  String              @id @default(cuid())
  serviceSeekerId     String
  date                DateTime
  time                String?
  oralCare            OralCareType
  assisted            AssistedType
  notes               String?
  compliance          ComplianceStatus
  completed           TaskCompletion
  emotion             EmotionType
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  createdById         String
  updatedById         String

  // Relations
  serviceSeeker       ServiceSeeker       @relation(fields: [serviceSeekerId], references: [id])
  createdBy           User                @relation("OralCareTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy           User                @relation("OralCareTaskUpdatedBy", fields: [updatedById], references: [id])
}

model OxygenTask {
  id                  String              @id @default(cuid())
  serviceSeekerId     String
  date                DateTime
  time                String
  quantity            String
  notes               String?
  completed           TaskCompletion
  emotion             EmotionType
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  createdById         String
  updatedById         String

  // Relations
  serviceSeeker       ServiceSeeker       @relation(fields: [serviceSeekerId], references: [id])
  createdBy           User                @relation("OxygenTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy           User                @relation("OxygenTaskUpdatedBy", fields: [updatedById], references: [id])
}

model PersonCentredTaskName {
  id                  String                @id @default(cuid())
  name                String                @unique
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  
  // Relations
  tasks               PersonCentredTask[]
}

model PersonCentredTask {
  id                  String                @id @default(cuid())
  serviceSeekerId     String
  date                DateTime
  time                String
  nameId              String
  notes               String?
  photoUrl            String?
  completed           TaskCompletion
  emotion             EmotionType
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  createdById         String
  updatedById         String

  // Relations
  serviceSeeker       ServiceSeeker         @relation(fields: [serviceSeekerId], references: [id])
  taskName            PersonCentredTaskName @relation(fields: [nameId], references: [id])
  createdBy           User                  @relation("PersonCentredTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy           User                  @relation("PersonCentredTaskUpdatedBy", fields: [updatedById], references: [id])
}

model FollowUpTask {
  id                String           @id @default(cuid())
  serviceSeekerId   String
  date              DateTime
  time              String
  followUpDate      DateTime
  followUpTime      String
  name              String
  description       String?
  status            FollowUpStatus
  emotion           EmotionType
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  createdById       String
  updatedById       String

  // Relations
  serviceSeeker     ServiceSeeker    @relation(fields: [serviceSeekerId], references: [id])
  createdBy         User             @relation("FollowUpTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy         User             @relation("FollowUpTaskUpdatedBy", fields: [updatedById], references: [id])
}
