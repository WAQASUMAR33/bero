// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//
// ENUMS
//
enum UserStatus {
  ARCHIVED
  CURRENT
}

enum ServiceSeekerStatus {
  LIVE
  PRE_ADMISSION
  ARCHIVED
  ARCHIVED_PRE_ADMISSION
  ON_HOLD_HOSPITAL
}

enum ChargeType {
  PER_HOUR
  PER_SHIFT
}

enum FunderPaymentType {
  PER_SHIFT
  BY_PERCENTAGE_SPENT
}

//
// MODELS
//

model RoleDefinition {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "ADMIN", "CAREWORKER"
  displayName String   // e.g., "Administrator", "Care Worker"
  description String?
  permissions Json     // Array of permission strings
  isSystem    Boolean  @default(false) // System roles cannot be deleted
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
}

model User {
  id               String       @id @default(cuid())
  firstName        String
  lastName         String
  username         String       @unique
  phoneNo          String
  email            String       @unique
  roleId           String
  password         String
  isEmailVerified  Boolean      @default(false)
  lastLoggedIn     DateTime?
  profilePic       String?
  employeeNumber   String?      @unique
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  startDate        DateTime?
  leaveDate        DateTime?
  regionId         String?
  emergencyName    String?
  emergencyContact String?
  postalCode       String?
  contractedHours  Int?
  status           UserStatus
  niNumber         String?

  // Relations
  role             RoleDefinition @relation(fields: [roleId], references: [id])
  region           Region?      @relation(fields: [regionId], references: [id])
  documents        Document[]   @relation("UserDocuments")
  uploadedDocs     Document[]   @relation("UploadedByUser")
  standByShifts    StandByShift[]

  permissions      UserPermission[]

  // Audit relations
  createdServiceSeekers ServiceSeeker[]   @relation("ServiceSeekerCreatedBy")
  updatedServiceSeekers ServiceSeeker[]   @relation("ServiceSeekerUpdatedBy")
  createdBathingTasks   BathingTask[]     @relation("BathingTaskCreatedBy")
  updatedBathingTasks   BathingTask[]     @relation("BathingTaskUpdatedBy")
  createdBehaviourTasks BehaviourTask[]   @relation("BehaviourTaskCreatedBy")
  updatedBehaviourTasks BehaviourTask[]   @relation("BehaviourTaskUpdatedBy")
  createdBloodTestTasks BloodTestTask[]   @relation("BloodTestTaskCreatedBy")
  updatedBloodTestTasks BloodTestTask[]   @relation("BloodTestTaskUpdatedBy")
}

model UserPermission {
  id        String   @id @default(cuid())
  userId    String
  key       String   // flexible permission key (admin defines)

  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, key]) // prevent duplicate permissions for same user
}

model Document {
  id         String   @id @default(cuid())
  userId     String   // document belongs to this user
  uploadedBy String   // uploaded by which user

  fileUrl    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user       User     @relation("UserDocuments", fields: [userId], references: [id])
  uploader   User     @relation("UploadedByUser", fields: [uploadedBy], references: [id])
}

model Region {
  id        String   @id @default(cuid())
  title     String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]
}

model DailyTask {
  id        String   @id @default(cuid())
  taskTitle String
  logoUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceSeeker {
  id             String              @id @default(cuid())
  firstName      String
  lastName       String
  postalCode     String?
  address        String?
  latitude       Float?
  longitude      Float?
  photoUrl       String?
  title          String?
  preferredName  String?
  dateOfBirth    DateTime?
  gender         String?
  genderAtBirth  String?
  pronouns       String?
  dnar           Boolean?
  sexuality      String?
  status         ServiceSeekerStatus
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdById    String?
  updatedById    String?

  shifts          Shift[]
  bathingTasks    BathingTask[]
  behaviourTasks  BehaviourTask[]
  bloodTestTasks  BloodTestTask[]

  // Relations
  createdBy       User?    @relation("ServiceSeekerCreatedBy", fields: [createdById], references: [id])
  updatedBy       User?    @relation("ServiceSeekerUpdatedBy", fields: [updatedById], references: [id])
}

model Shift {
  id                 String    @id @default(cuid())
  serviceSeekerId    String
  fromDate           DateTime
  untilDate          DateTime?
  every              String?   // "day" | "week"
  startTime          DateTime
  endTime            DateTime
  shiftType          String
  totalStaffReq      Int
  funderId           String?
  chargesPer         ChargeType
  charges            Float
  chargesBankHoliday Float?
  timeCritical       Boolean   @default(false)
  shiftRunId         String?
  noteCaretaker      String?
  noteManager        String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  serviceSeeker      ServiceSeeker @relation(fields: [serviceSeekerId], references: [id])
  funder             Funder?       @relation(fields: [funderId], references: [id])
  shiftRun           ShiftRun?     @relation(fields: [shiftRunId], references: [id])
}

model Funder {
  id              String   @id @default(cuid())
  fundingSource   String
  contractNumber  String
  serviceType     String
  costNotes       String?
  paymentType     FunderPaymentType
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  shifts          Shift[]
}

model ShiftRun {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shifts    Shift[]
}

model StandByShift {
  id                   String   @id @default(cuid())
  caretakerId          String
  date                 DateTime
  startTime            DateTime
  endTime              DateTime
  workDetail           String
  stay                 Boolean
  caretakerPayRegular  Float
  caretakerPayBankHoliday Float
  carerPayBy           ChargeType

  // Relations
  caretaker            User     @relation(fields: [caretakerId], references: [id])
}

enum BathingType {
  BATH
  BEDWASH
  FULL_BODY_WASH
  LOWER_BODY_WASH
  SHOWER
  STRIP_WASH
}

enum ComplianceStatus {
  COMPLETED
  DECLINED
}

enum TaskCompletion {
  YES
  NO
  ATTEMPTED
  NOT_REQUIRED
}

enum EmotionType {
  SAD
  NEUTRAL
  HAPPY
}

model BathingTask {
  id                String           @id @default(cuid())
  serviceSeekerId   String
  date              DateTime
  time              String
  bathingType       BathingType
  compliance        ComplianceStatus
  stoolPassed       Boolean
  urinePassed       Boolean
  bathNotes         String?
  catheterChecked   Boolean
  completed         TaskCompletion
  emotion           EmotionType
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  createdById       String
  updatedById       String

  // Relations
  serviceSeeker     ServiceSeeker    @relation(fields: [serviceSeekerId], references: [id])
  createdBy         User             @relation("BathingTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy         User             @relation("BathingTaskUpdatedBy", fields: [updatedById], references: [id])
}

enum BehaviourType {
  AGGRESSION_HITTING_BITING
  CRYING
  HAPPY_APPRECIATING
  ISOLATION
  SELF_INJURIOUS_BEHAVIOUR
  SEXUALIZED_BEHAVIOUR_IN_PUBLIC
  SHOUTING_SWEARING
  SOILING_SMEARING
  STARVATION
  THROWING_BREAKING_ITEMS
}

model BehaviourTrigger {
  id          String   @id @default(cuid())
  name        String   @unique
  define      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  behaviourTasks BehaviourTask[]
}

model BehaviourTask {
  id                    String           @id @default(cuid())
  serviceSeekerId       String
  date                  DateTime
  time                  String
  type                  BehaviourType
  triggerId             String
  othersInvolved        Boolean
  othersInvolvedDetails String?
  antecedents           String?
  behaviour             String?
  consequences          String?
  careIntervention      String?
  emotion               EmotionType
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  createdById           String
  updatedById           String

  // Relations
  serviceSeeker         ServiceSeeker    @relation(fields: [serviceSeekerId], references: [id])
  trigger               BehaviourTrigger @relation(fields: [triggerId], references: [id])
  createdBy             User             @relation("BehaviourTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy             User             @relation("BehaviourTaskUpdatedBy", fields: [updatedById], references: [id])
}

enum BloodTestWhen {
  BEFORE_BREAKFAST
  AFTER_BREAKFAST
  BEFORE_LUNCH
  AFTER_LUNCH
  BEFORE_TEA
  AFTER_TEA
  BEFORE_DINNER
  AFTER_DINNER
}

enum SideAdministered {
  LEFT
  LEFT_UPPER
  LEFT_LOWER
  RIGHT
  RIGHT_UPPER
  RIGHT_LOWER
}

model BloodTestTask {
  id                  String           @id @default(cuid())
  serviceSeekerId     String
  date                DateTime
  time                String
  when                BloodTestWhen
  bloodGlucose        Float?
  insulinGiven        String?
  sideAdministered    SideAdministered?
  note                String?
  completed           TaskCompletion
  emotion             EmotionType
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  createdById         String
  updatedById         String

  // Relations
  serviceSeeker       ServiceSeeker    @relation(fields: [serviceSeekerId], references: [id])
  createdBy           User             @relation("BloodTestTaskCreatedBy", fields: [createdById], references: [id])
  updatedBy           User             @relation("BloodTestTaskUpdatedBy", fields: [updatedById], references: [id])
}
